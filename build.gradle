import arc.files.Fi
import arc.util.OS

apply plugin: "java"

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

var targetCompat = 8
var sourceCompat = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url 'https://www.jitpack.io' }
    maven { url 'https://maven.xpdustry.com/mindustry' }
    maven { url "https://raw.githubusercontent.com/GlennFolker/EntityAnnoMaven/main" }
}

ext {
    //windows sucks
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    //why tho
    //annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    annotationProcessor "com.github.GlennFolker.EntityAnno:downgrader:$entVersion"
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
        maven { url 'https://www.jitpack.io' }
        maven { url 'https://maven.xpdustry.com/mindustry' }
    }

    dependencies {
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
    }
}

//force arc version
configurations.configureEach {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.github.Anuken.Arc') {
            details.useVersion "$mindustryVersion"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    targetCompatibility = targetCompat
    sourceCompatibility = sourceCompat

    options.release = 8
    options.compilerArgs.add("-Xlint:-options")

    options.incremental = true
    options.encoding = "UTF-8"
}

var jarAndroidTask = tasks.register("jarAndroid", Jar) {
    dependsOn "jar"

    doLast {
        if (!sdkRoot || !new File(sdkRoot as String).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

        def platformRoot = new File("$sdkRoot/platforms/android-$androidSdkVersion/android.jar")

        if (!platformRoot) throw new GradleException("Android SDK `platforms;android-$androidSdkVersion` isn't installed or is corrupted")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [platformRoot]).collect { "--classpath $it.path" }.join(" ")

        def d8name = "d8"
        if (OS.isWindows) d8name = "d8.bat"
        def d8 = new File((String) (sdkRoot + "/build-tools/$androidBuildVersion/" + d8name))

        if (!d8.exists()) throw new IllegalStateException("Android SDK `build-tools;$androidBuildVersion` isn't installed or is corrupted")

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api $androidMinVersion --output ${modArtifact}Global.jar ${modArtifact}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    archiveFileName = "${modArtifact}Desktop.jar"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
        include "icon.png"
    }

    from("assets/") {
        include "**"
    }
}

tasks.register("deploy", Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${modArtifact}.jar"

    from { [zipTree("$buildDir/libs/${modArtifact}Desktop.jar"), zipTree("$buildDir/libs/${modArtifact}Global.jar")] }

    doLast {
        delete {
            delete "$buildDir/libs/${modArtifact}Desktop.jar"
            delete "$buildDir/libs/${modArtifact}Global.jar"
        }
    }
}

tasks.register("install", DefaultTask) {
    inputs.files(jar)

    var jarTask = tasks.named("jar") as TaskProvider<Jar>

    var desktopJar = jarTask.flatMap { it.archiveFile }
    var dexJar = jarAndroidTask.flatMap { it.archiveFileName }
    doLast {
        var folder = Fi.get(OS.getAppDataDirectoryString("Mindustry")).child("mods")
        folder.mkdirs()

        var input = desktopJar.get().asFile
        folder.child(input.name).delete()
        folder.child(dexJar.get()).delete()
        new Fi(input).copyTo(folder)

        logger.lifecycle("Copied :jar output to $folder.")
    }
}
